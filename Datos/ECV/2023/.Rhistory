Rancho_Vivienda_De_Desechos=case_when(p2=='Rancho o vivienda de desechos'~1,.default = 0),
Edificacion_No_Desintada_Para_Habitacion=case_when(p2=='Vivienda en edificación no destinada para habitación'~1,.default = 0)
)
table(data_viviendas$p3)
table(data_viviendas$p6_1)
data_viviendas<-data_viviendas %>% mutate(
Paredes_Precarias=case_when(
p3=='Ladrillo - Bloque - Adobe revocado y pintado' |
p3=='Ladrillo - Bloque Forrado en piedra, madera' ~0, .default = 1),
Pisos_Precarios=case_when(
p4=='Baldosa, vinilo, tableta o ladrillo' |
p4=='Alfombra o tapete de pared a pared, mármol, parqué,  Madera' ~0, .default = 1),
Sin_Energia=case_when(p6_1=='Si posee' ~0, .default = 1),
Sin_Acueducto=case_when(p6_2=='Si posee' ~0, .default = 1),
Sin_Alcantarillado=case_when(p6_3=='Si posee' ~0, .default = 1),
Sin_Gas_Natural=case_when(p6_5=='Si posee' ~0, .default = 1),
Sin_Internet=case_when(p6_7=='Si posee' ~0, .default = 1),
Precariedad_Vivienda=
Paredes_Precarias+
Pisos_Precarios+
Sin_Energia+
Sin_Acueducto+
Sin_Alcantarillado+
Sin_Gas_Natural+
Sin_Internet
)
data_viviendas<-data_viviendas %>% mutate(
Paredes_Precarias=case_when(
p3=='Ladrillo - Bloque - Adobe revocado y pintado' |
p3=='Ladrillo - Bloque Forrado en piedra, madera' ~0, .default = 1),
Pisos_Precarios=case_when(
p4=='Baldosa, vinilo, tableta o ladrillo' |
p4=='Alfombra o tapete de pared a pared, mármol, parqué,  Madera' ~0, .default = 1),
Sin_Energia=case_when(p6_1=='Si posee' ~0, .default = 1),
Sin_Acueducto=case_when(p6_2=='Si posee' ~0, .default = 1),
Sin_Alcantarillado=case_when(p6_3=='Si posee' ~0, .default = 1),
Sin_Gas_Natural=case_when(p6_5=='Si posee' ~0, .default = 1),
Sin_Internet=case_when(p6_7=='Si posee' ~0, .default = 1),
Precariedad_Sanitario=case_when(p15=='Inodoro conectado a alcantarillado' ~0, .default =1),
Precariedad_Vivienda=
Paredes_Precarias+
Pisos_Precarios+
Sin_Energia+
Sin_Acueducto+
Sin_Alcantarillado+
Sin_Gas_Natural+
Sin_Internet+
Precariedad_Sanitario
)
#Base de viviendas
data_viviendas<-data_viviendas %>% mutate(base_viviendas=1)
# Tipos de construcciones
data_viviendas<-data_viviendas %>% mutate(
Apartamento=case_when(p2=='Apartamento'~1,.default = 0),
Casa=case_when(p2=='Casa'~1,.default = 0),
Cuarto=case_when(p2=='Cuarto(S)'~1,.default = 0),
Rancho_Vivienda_De_Desechos=case_when(p2=='Rancho o vivienda de desechos'~1,.default = 0),
Edificacion_No_Desintada_Para_Habitacion=case_when(p2=='Vivienda en edificación no destinada para habitación'~1,.default = 0)
)
variables_viviendas<-data_viviendas %>%
group_by(barrio) %>%
summarise(
Base_Viviendas=sum(base_viviendas),
Apartamentos=sum(Apartamento),
Casa=sum(Casa),
Cuarto=sum(Cuarto),
Rancho_Vivienda_De_Desechos=sum(Rancho_Vivienda_De_Desechos),
Edificacion_No_Desintada_Para_Habitacion=sum(Edificacion_No_Desintada_Para_Habitacion),
Paredes_Precarias=sum(Paredes_Precarias),
Pisos_Precarios=sum(Pisos_Precarios),
Sin_Energia=sum(Sin_Energia),
Sin_Acueducto=sum(Sin_Acueducto),
Sin_Alcantarillado=sum(Sin_Alcantarillado),
Sin_Gas_Natural=sum(Sin_Gas_Natural),
Sin_Internet=sum(Sin_Internet),
Precariedad_Sanitario=sum(Precariedad_Sanitario),
Promedio_Precariedad=mean(Precariedad_Vivienda))
##### CREAR VARIABLES HOGARES ####
#Seleccionar las variables de interes
data_hogares<-data_hogares %>% select(
noform,
comuna,
estrato,
barrio,
area,
p14_6,
no_hogar,
p17,
p18_1,
p18_2,
p18_3,
p18_4,
p18_5,
p18_6,
p18_7,
p22,
p23,
orden
)
#Vivienda en arriendo
data_hogares<-data_hogares %>% mutate(
Vivienda_Arriendo=case_when(p22=='En Arriendo O Subarriendo'~1,.default = 0))
table(data_hogares$Vivienda_Arriendo)
data %>% group_by(noform) %>% summarise(total_personas_hogar=sum(base_encuestas))
Poblacion_Hogar<-data %>% group_by(noform) %>% summarise(total_personas_vivienda=sum(base_encuestas))
View(Poblacion_Hogar)
data_viviendas<-data_viviendas %>% left_join(Poblacion_Hogar.by='noform')
View(data_viviendas)
data_viviendas<-data_viviendas %>% left_join(Poblacion_Hogar,by='noform')
table(is.na(data_viviendas$total_personas_vivienda))
View(data_viviendas)
View(data_viviendas)
data_viviendas<-data_viviendas %>% mutate(
Paredes_Precarias=case_when(
p3=='Ladrillo - Bloque - Adobe revocado y pintado' |
p3=='Ladrillo - Bloque Forrado en piedra, madera' ~0, .default = 1),
Pisos_Precarios=case_when(
p4=='Baldosa, vinilo, tableta o ladrillo' |
p4=='Alfombra o tapete de pared a pared, mármol, parqué,  Madera' ~0, .default = 1),
Sin_Energia=case_when(p6_1=='Si posee' ~0, .default = 1),
Sin_Acueducto=case_when(p6_2=='Si posee' ~0, .default = 1),
Sin_Alcantarillado=case_when(p6_3=='Si posee' ~0, .default = 1),
Sin_Gas_Natural=case_when(p6_5=='Si posee' ~0, .default = 1),
Sin_Internet=case_when(p6_7=='Si posee' ~0, .default = 1),
Precariedad_Sanitario=case_when(p15=='Inodoro conectado a alcantarillado' ~0, .default =1),
Precariedad_Hacinamiento=case_when(total_personas_vivienda/p14_6>3 ~1,.default = 0),
Precariedad_Vivienda=
Paredes_Precarias+
Pisos_Precarios+
Sin_Energia+
Sin_Acueducto+
Sin_Alcantarillado+
Sin_Gas_Natural+
Sin_Internet+
Precariedad_Sanitario+
Precariedad_Hacinamiento
)
table(data_viviendas$Precariedad_Hacinamiento)
#Base de viviendas
data_viviendas<-data_viviendas %>% mutate(base_viviendas=1)
variables_viviendas<-data_viviendas %>%
group_by(barrio) %>%
summarise(
Base_Viviendas=sum(base_viviendas),
Apartamentos=sum(Apartamento),
Casa=sum(Casa),
Cuarto=sum(Cuarto),
Rancho_Vivienda_De_Desechos=sum(Rancho_Vivienda_De_Desechos),
Edificacion_No_Desintada_Para_Habitacion=sum(Edificacion_No_Desintada_Para_Habitacion),
Paredes_Precarias=sum(Paredes_Precarias),
Pisos_Precarios=sum(Pisos_Precarios),
Sin_Energia=sum(Sin_Energia),
Sin_Acueducto=sum(Sin_Acueducto),
Sin_Alcantarillado=sum(Sin_Alcantarillado),
Sin_Gas_Natural=sum(Sin_Gas_Natural),
Sin_Internet=sum(Sin_Internet),
Precariedad_Sanitario=sum(Precariedad_Sanitario),
Precariedad_Hacinamiento=sum(Precariedad_Hacinamiento),,
Promedio_Precariedad=mean(Precariedad_Vivienda))
data_hogares<-data_hogares %>% mutate(base_hogares=1)
mean(data_hogares$p23)
variables_hogares<-data_hogares %>%
group_by(barrio) %>%
summarise(
Base_Hogares=sum(base_hogares),
Vivienda_Arriendo=sum(Vivienda_Arriendo),
Promedio_Viviendo_En_Vivienda=mean(p23),
Estrato_Promedio=mean(estrato))
View(variables_viviendas)
#Armar la data
data_hogares<-data_hogares %>% mutate(base_hogares=1)
variables_hogares<-data_hogares %>%
group_by(barrio) %>%
summarise(
Base_Hogares=sum(base_hogares),
Hogares_Viviendo_Arriendo=sum(Vivienda_Arriendo),
Promedio_Hogar_Viviendo_En_Vivienda=mean(p23),
Estrato_Promedio=mean(estrato))
View(variables_hogares)
4+14+16
variables<-variables_personas %>%
left_join(variables_viviendas, by='barrio') %>%
left_join(variables_hogares, by='barrio')
View(variables)
variables<-variables %>% mutate(Medicion=2004)
View(variables)
writexl::write_xlsx(variables,"C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Data/DATOS ECV/Alcaldia de Medellín/Preprocesados/Variables_ECV_2004.xlsx")
names(variables)
as.data.frame(names(variables))
tabla<-as.data.frame(names(variables))
View(tabla)
library(tidyverse)
library(ggridges)
install.packages("ggridges")
library(tidyverse)
library(ggridges)
library(broom)
library(faux)
install.packages("faux")
library(tidyverse)
library(ggridges)
library(broom)
library(faux)
set.seed(1234)
N<- 1000000
income_aut<-100
effect<-10
df<-tibble(
educ=rnorm(N,mean=11,sd=9),
u=rnorm(N,mean=0,sd=36),
income=income_aut+ effect+u) %>%
mutate(
niv_edu=case_when(educ<=5 ~ 0, # "sin educacion"
educ >5 & educ <=9~ 5,
educ >9 & educ <=11~ 9,
educ >11 & educ <=16~ 11,
educ >16 & educ <=18~ 16,
educ >18 & educ <=20~ 18,
educ >20 ~ 20)
)
View(df)
mean(df$educ)
mean(df$U)
mean(df$u)
mean(df$educ)
mean(df$income)
sd(df$educ)
sd(df$u)
sd(df$niv_edu)
sd(df$income)
11+5+2+1
ggplot(df)+
geom_histogram(aes(income), bins=100, color="white", fill="green", alpha=0.5)+
geom_histogram(aes(educ), bins=100, color="white", fill="orange", alpha=0.5)+
geom_histogram(aes(u), bins=100, color="white", fill="blue", alpha=0.5)+
theme_minimal()
df %>% ggplot() +
geom_histogram(aes(income), bins=100, color="white", fill="green", alpha=0.5)+
geom_histogram(aes(educ), bins=100, color="white", fill="orange", alpha=0.5)+
geom_histogram(aes(u), bins=100, color="white", fill="blue", alpha=0.5)+
theme_minimal()
df %>% ggplot()+
aes(x=u,y=niv_edu, group = niv_edu)+
geom_density_ridges(alpha=0.3)+
coord_flip()+
theme_classic()
df %>% ggplot()+
aes(x=u,y=niv_edu, group = niv_edu)+
geom_density_ridges(alpha=0.3)+
coord_flip()+
theme_dark()
df %>% ggplot()+
aes(x=u,y=niv_edu, group = niv_edu)+
geom_density_ridges(alpha=0.3)+
coord_flip()+
theme_linedraw()
df %>% ggplot()+
aes(x=u,y=niv_edu, group = niv_edu)+
geom_density_ridges(alpha=0.3)+
coord_flip()+
theme_bw()
library(ggthemes)
df %>% ggplot()+
aes(x=u,y=niv_edu, group = niv_edu)+
geom_density_ridges(alpha=0.3)+
coord_flip()+
theme_stata()
df %>% ggplot()+
aes(x=u,y=niv_edu, group = niv_edu)+
geom_density_ridges(alpha=0.3)+
coord_flip()+
theme_economist()
df %>% ggplot()+
aes(x=u,y=niv_edu, group = niv_edu)+
geom_density_ridges(alpha=0.3)+
coord_flip()+
theme_economist_white()
df %>% ggplot()+
aes(x=u,y=niv_edu, group = niv_edu)+
geom_density_ridges(alpha=0.3)+
coord_flip()+
theme_excel()
df %>% ggplot()+
aes(x=u,y=niv_edu, group = niv_edu)+
geom_density_ridges(alpha=0.3)+
coord_flip()+
theme_base()
df %>% ggplot()+
aes(x=u,y=niv_edu, group = niv_edu)+
geom_density_ridges(alpha=0.3)+
coord_flip()+
theme_gdocs()
df %>% ggplot()+
aes(x=u,y=niv_edu, group = niv_edu)+
geom_density_ridges(alpha=0.3)+
coord_flip()+
theme_clean()
n_sample=10000
reg<-list()
for(i in (1:1000)){
df_sample<-df[sample(nrow(df),n_sample),]
reg[[i]]<-lm(income~educ, data=df_sample) %>%
tidy(conf.int=TRUE) %>%
filter(term=="educ") %>%
select(~term)
}
for(i in (1:1000)){
df_sample<-df[sample(nrow(df),n_sample),]
reg[[i]]<-lm(income~educ, data=df_sample) %>%
tidy(conf.int=TRUE) %>%
filter(term=="educ") %>%
select(-term)
}
View(reg)
reg<- bind_rows(reg) %>%
rownames_to_column(var="reg")
media<-mean(reg$estimate, na.rm = TRUE)
reg %>% ggplot() +
geom_histogram(aes(estimate), bins=100, color="white", fill="green", alpha=0.5)+
theme(minimal)
reg %>% ggplot() +
geom_histogram(aes(estimate), bins=100, color="white", fill="green", alpha=0.5)+
theme_minimal()
reg %>% ggplot() +
geom_histogram(aes(estimate), bins=100, color="white", fill="green", alpha=0.5)+
geom_line(aes(media))+
theme_minimal()
reg %>% ggplot() +
geom_histogram(aes(estimate), bins=100, color="white", fill="green", alpha=0.5)+
theme_minimal()
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/Base de datos Encuesta Calidad de Vida 2009.xlsx")
View(data)
84474/9500
setwd("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Arriendos_Medellin/Datos/ECV/2009")
# Definir el tamaño del bloque
tamaño_bloque <- 9500
# Calcular el número total de bloques
n_bloques <- ceiling(nrow(data) / tamaño_bloque)
# Dividir los datos y guardarlos en archivos CSV
for (i in seq_len(n_bloques)) {
# Definir el índice inicial y final para cada bloque
inicio <- (i - 1) * tamaño_bloque + 1
fin <- min(i * tamaño_bloque, nrow(data))
# Extraer el bloque
bloque <- data[inicio:fin, ]
# Definir el nombre del archivo CSV
nombre_archivo <- sprintf("ECV_2009_%03d.csv", i)
# Guardar el bloque en un archivo CSV con codificación UTF-8
write.csv(bloque, nombre_archivo, row.names = FALSE, fileEncoding = "UTF-8")
}
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/Base de datos ECV 2010.xlsx")
View(data)
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/Base de datos ECV 2010.xlsx",
sheet = "Vivienda_Hogar_PersonaECV2010")
View(data)
setwd("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Arriendos_Medellin/Datos/ECV/2010")
# Definir el tamaño del bloque
tamaño_bloque <- 9500
# Calcular el número total de bloques
n_bloques <- ceiling(nrow(data) / tamaño_bloque)
# Dividir los datos y guardarlos en archivos CSV
for (i in seq_len(n_bloques)) {
# Definir el índice inicial y final para cada bloque
inicio <- (i - 1) * tamaño_bloque + 1
fin <- min(i * tamaño_bloque, nrow(data))
# Extraer el bloque
bloque <- data[inicio:fin, ]
# Definir el nombre del archivo CSV
nombre_archivo <- sprintf("ECV_2010_%03d.csv", i)
# Guardar el bloque en un archivo CSV con codificación UTF-8
write.csv(bloque, nombre_archivo, row.names = FALSE, fileEncoding = "UTF-8")
}
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/Base de datos ECV 2011 (1).xlsx")
View(data)
setwd("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Arriendos_Medellin/Datos/ECV/2011")
# Definir el tamaño del bloque
tamaño_bloque <- 9500
# Calcular el número total de bloques
n_bloques <- ceiling(nrow(data) / tamaño_bloque)
# Dividir los datos y guardarlos en archivos CSV
for (i in seq_len(n_bloques)) {
# Definir el índice inicial y final para cada bloque
inicio <- (i - 1) * tamaño_bloque + 1
fin <- min(i * tamaño_bloque, nrow(data))
# Extraer el bloque
bloque <- data[inicio:fin, ]
# Definir el nombre del archivo CSV
nombre_archivo <- sprintf("ECV_2011_%03d.csv", i)
# Guardar el bloque en un archivo CSV con codificación UTF-8
write.csv(bloque, nombre_archivo, row.names = FALSE, fileEncoding = "UTF-8")
}
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/Base de datos ECV 2012.xlsx")
View(data)
setwd("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Arriendos_Medellin/Datos/ECV/2012")
# Definir el tamaño del bloque
tamaño_bloque <- 9500
# Calcular el número total de bloques
n_bloques <- ceiling(nrow(data) / tamaño_bloque)
# Dividir los datos y guardarlos en archivos CSV
for (i in seq_len(n_bloques)) {
# Definir el índice inicial y final para cada bloque
inicio <- (i - 1) * tamaño_bloque + 1
fin <- min(i * tamaño_bloque, nrow(data))
# Extraer el bloque
bloque <- data[inicio:fin, ]
# Definir el nombre del archivo CSV
nombre_archivo <- sprintf("ECV_2012_%03d.csv", i)
# Guardar el bloque en un archivo CSV con codificación UTF-8
write.csv(bloque, nombre_archivo, row.names = FALSE, fileEncoding = "UTF-8")
}
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/Base de datos ECV 2013.xlsx")
View(data)
setwd("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Arriendos_Medellin/Datos/ECV/2013")
# Definir el tamaño del bloque
tamaño_bloque <- 9500
# Calcular el número total de bloques
n_bloques <- ceiling(nrow(data) / tamaño_bloque)
# Dividir los datos y guardarlos en archivos CSV
for (i in seq_len(n_bloques)) {
# Definir el índice inicial y final para cada bloque
inicio <- (i - 1) * tamaño_bloque + 1
fin <- min(i * tamaño_bloque, nrow(data))
# Extraer el bloque
bloque <- data[inicio:fin, ]
# Definir el nombre del archivo CSV
nombre_archivo <- sprintf("ECV_2013_%03d.csv", i)
# Guardar el bloque en un archivo CSV con codificación UTF-8
write.csv(bloque, nombre_archivo, row.names = FALSE, fileEncoding = "UTF-8")
}
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/Base de datos ECV 2014.xlsx")
View(data)
source("~/Dividir datas.R", echo=TRUE)
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/Base de datos ECV 2015.xlsx")
View(data)
source("~/Dividir datas.R", echo=TRUE)
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/Base de Datos_ECV_2016.xlsx")
View(data)
setwd("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Arriendos_Medellin/Datos/ECV/2016")
# Definir el tamaño del bloque
tamaño_bloque <- 9500
# Calcular el número total de bloques
n_bloques <- ceiling(nrow(data) / tamaño_bloque)
# Dividir los datos y guardarlos en archivos CSV
for (i in seq_len(n_bloques)) {
# Definir el índice inicial y final para cada bloque
inicio <- (i - 1) * tamaño_bloque + 1
fin <- min(i * tamaño_bloque, nrow(data))
# Extraer el bloque
bloque <- data[inicio:fin, ]
# Definir el nombre del archivo CSV
nombre_archivo <- sprintf("ECV_2016_%03d.csv", i)
# Guardar el bloque en un archivo CSV con codificación UTF-8
write.csv(bloque, nombre_archivo, row.names = FALSE, fileEncoding = "UTF-8")
}
library(readr)
data <- read_csv("C:/Users/HP-Laptop/Downloads/ECV_2017.csv")
View(data)
data <- read.csv2("C:/Users/HP-Laptop/Downloads/ECV_2017.csv")
View(data)
setwd("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Arriendos_Medellin/Datos/ECV/2017")
source("~/Dividir datas.R", echo=TRUE)
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/ECV_2018-1.xlsx")
View(data)
source("~/Dividir datas.R", echo=TRUE)
library(readxl)
BD_ECV_2019_2_ <- read_excel("C:/Users/HP-Laptop/AppData/Local/Microsoft/Windows/INetCache/IE/4L98BALY/BD_ECV_2019[2].xlsx")
View(BD_ECV_2019_2_)
setwd("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Arriendos_Medellin/Datos/ECV/2019")
# Definir el tamaño del bloque
tamaño_bloque <- 15500
# Calcular el número total de bloques
n_bloques <- ceiling(nrow(data) / tamaño_bloque)
# Dividir los datos y guardarlos en archivos CSV
for (i in seq_len(n_bloques)) {
# Definir el índice inicial y final para cada bloque
inicio <- (i - 1) * tamaño_bloque + 1
fin <- min(i * tamaño_bloque, nrow(data))
# Extraer el bloque
bloque <- data[inicio:fin, ]
# Definir el nombre del archivo CSV
nombre_archivo <- sprintf("ECV_2019_%03d.csv", i)
# Guardar el bloque en un archivo CSV con codificación UTF-8
write.csv(bloque, nombre_archivo, row.names = FALSE, fileEncoding = "UTF-8")
}
View(data)
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/Encuesta Calidad de Vida_ECV2022 (1).xlsx")
View(data)
source("~/Dividir datas.R", echo=TRUE)
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/170008413177 (1)BD 1 (1).xlsx")
View(data)
source("~/Dividir datas.R", echo=TRUE)
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/AppData/Local/Microsoft/Windows/INetCache/IE/Q5R0D4DU/BD_ECV_2019[2].xlsx")
View(data)
source("~/Dividir datas.R", echo=TRUE)
library(readxl)
Viviendas_Hogares_Personas_ECV_2023 <- read_excel("C:/Users/HP-Laptop/Downloads/Viviendas-Hogares-Personas_ECV-2023.csv")
data <- read.csv2("C:/Users/HP-Laptop/Downloads/Viviendas-Hogares-Personas_ECV-2023.csv")
View(data)
source("~/Dividir datas.R", echo=TRUE)
