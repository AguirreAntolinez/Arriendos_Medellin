capital=ts(capital,freq=1,start=1905),
PIB=ts(PIB,freq=1,start=1905))
plot(x = seriescol$Year,y = seriescol$Year)
plot.ts(x = seriescol$Year,y = seriescol$Year)
seriescol <- read_excel("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Procesos estocasticos/seriescol.xls")
#Graficar las series de PIB, Capital y Trabajo
seriescol<-seriescol %>% mutate(PEA=ts(PEA,freq=1,start=1905),
capital=ts(capital,freq=1,start=1905),
PIB=ts(PIB,freq=1,start=1905))
plot.ts(x = seriescol$Year,y = seriescol$Year)
plot.ts(x = seriescol$Year,y = seriescol$Year, xy.labels = F)
plot.ts(x = seriescol$Year,y = seriescol$Year, xy.labels = F, xy.lines = T)
plot.ts(x = seriescol$Year,y = seriescol$Year, xy.labels = F, xy.lines = F)
plot.ts(x = seriescol$PEA)
plot.ts(x = seriescol$PEA, ylab="PEA", xlab="Año",main="PEA de Colombia")
plot.ts(x = seriescol$PEA, ylab="PEA", xlab="Año",main="Evloución PEA de Colombia", col=blues9)
plot.ts(x = seriescol$PEA, ylab="PEA", xlab="Año",main="Evloución PEA de Colombia", col="blues9")
plot.ts(x = seriescol$PEA, ylab="PEA", xlab="Año",main="Evloución PEA de Colombia", col="blue")
plot.ts(x = seriescol$capital, ylab="Capital", xlab="Año",main="Evolución Capital de Colombia", col="blue")
plot.ts(x = seriescol$PIB, ylab="PIB", xlab="Año",main="Evolución PIB de Colombia", col="blue")
acf(seriescol$PEA)
acf(seriescol$PEA,mean="Corelograma PEA")
seriescol %>% acf(PEA)
seriescol %>% acf()
seriescol %>% select(PEA) %>% acf()
seriescol %>% select(PEA) %>% acf()
seriescol %>% select(capital) %>% acf()
seriescol %>% select(PIB) %>% acf()
seriescol<-seriescol %>% mutate(
dPEA=diff(PEA),
dCapital=diff(capital),
dPIB=diff(PIB)
)
View(seriescol)
rlang::last_trace()
View(seriescol)
seriescol<-seriescol %>% mutate(
dPEA=diff(PEA),
dCapital=diff(capital),
dPIB=diff(PIB)
)
dseriescol<-seriescol %>% mutate(
dPEA=diff(PEA),
dCapital=diff(capital),
dPIB=diff(PIB)
)
seriescol %>% mutate(
dPEA=diff(PEA)
)
diff(seriescol$PEA)
dPEA<-diff(seriescol$PEA)
dPIB<-diff(seriescol$PIB)
dCapital<-diff(seriescol$capital)
dVar<-as.data.frame(dPEA,dCapital,dPIB)
dVar<-data.frame(dPEA,dCapital,dPIB)
dVar<-dVar %>% mutate(Year=c(1906:2004)) %>% left_join(seriescol, by = "Year")
View(dVar)
dVar %>% select(PEA,dPEA) %>% acf()
dVar %>% select(PEA,dPEA) %>% acf()
dVar %>% select(capital,dCapital) %>% acf()
dVar %>% select(PIB,dPIB) %>% acf()
View(dVar)
plot.ts(x = dVar$PEA, ylab="Primera diferencia PEA", xlab="Año",main="Primera diferencia PEA de Colombia", col="blue")
plot.ts(x = dVar$capital, ylab="Primera diferencia", xlab="Año",main="Primera diferencia Capital de Colombia", col="blue")
plot.ts(x = dVar$PIB, ylab="Primera diferencia PIB", xlab="Año",main="Primera diferencia PIB de Colombia", col="blue")
plot.ts(x = dVar$dPEA, ylab="Primera diferencia PEA", xlab="Año",main="Primera diferencia PEA de Colombia", col="blue")
plot.ts(x = dVar$dCapital, ylab="Primera diferencia", xlab="Año",main="Primera diferencia Capital de Colombia", col="blue")
plot.ts(x = dVar$dPIB, ylab="Primera diferencia PIB", xlab="Año",main="Primera diferencia PIB de Colombia", col="blue")
dVar %>% select(PEA,dPEA) %>% acf()
dVar %>% select(capital,dCapital) %>% acf()
dVar %>% select(PIB,dPIB) %>% acf()
library(tseries)
adVar %>% select(PEA) %>% adf.test()
dVar %>% select(PEA) %>% adf.test()
dVar %>% adf.test(PEA)
adf.test(seriescol$PEA)
dfPEA<-adf.test(seriescol$PEA)
dfPEA$parameter
dfPEA$data.name
dfPEA$parameter
dfPEA$alternative
#Pruebas de Dickey Fuller
pruebas<-list(
PEA=adf.test(seriescol$PEA),
dPEA=adf.test(dVar$dPEA)
capita=adf.test(seriescol$capital),
#Pruebas de Dickey Fuller
pruebas<-list(
PEA=adf.test(seriescol$PEA),
dPEA=adf.test(dVar$dPEA),
capita=adf.test(seriescol$capital),
dCapital=adf.test(dVar$dCapital),
PIB=adf.test(seriescol$PIB),
dPIB=adf.test(dVar$dPIB))
pruebas<-data.frame(Serie=names(pruebas),
Statisctic=sapply(pruebas, function(x) x$statistic),
'P-Value'=sapply(pruebas, function(x) x$p.value),
'Lag order'=sapply(pruebas, function(x) x$parameter),
'Alternative hypotesis'='Stationary')
View(pruebas)
length(pruebas)
pruebas<-data.frame(Serie=names(pruebas),
#Pruebas de Dickey Fuller
pruebas<-list(
PEA=adf.test(seriescol$PEA),
dPEA=adf.test(dVar$dPEA),
capita=adf.test(seriescol$capital),
dCapital=adf.test(dVar$dCapital),
PIB=adf.test(seriescol$PIB),
dPIB=adf.test(dVar$dPIB))
pruebas<-data.frame(Serie=names(pruebas),
#Pruebas de Dickey Fuller
pruebas<-list(
PEA=adf.test(seriescol$PEA),
dPEA=adf.test(dVar$dPEA),
capita=adf.test(seriescol$capital),
dCapital=adf.test(dVar$dCapital),
PIB=adf.test(seriescol$PIB),
dPIB=adf.test(dVar$dPIB))
pruebas<-data.frame(Serie=names(pruebas),
pruebas<-data.frame(Serie=names(pruebas),
pruebas<-data.frame(Serie=names(pruebas),
Statisctic=sapply(pruebas, function(x) x$statistic),
'P-Value'=sapply(pruebas, function(x) x$p.value),
'Lag order'=sapply(pruebas, function(x) x$parameter),
'Alternative hypotesis'='Stationary',
row.names = c(1:length(pruebas))
)
)
pruebas<-data.frame(Serie=names(pruebas),
Statisctic=sapply(pruebas, function(x) x$statistic),
'P-Value'=sapply(pruebas, function(x) x$p.value),
'Lag order'=sapply(pruebas, function(x) x$parameter),
'Alternative hypotesis'='Stationary',
row.names = c(1:length(pruebas)))
View(pruebas)
View(pruebas)
View(dfPEA)
y<-rnorm(1000000, mean=4,sd=50)
L<-diff(y)
e<-rnorm(1000000, mean=0,sd=2)
u=25000
y_t<-u+(1+0.54*L)^-1*e
y[1:1000000]
y_t<-u+(((1+0.54*L)^(-1))*e)
plot.ts(x = y_t, col="blue")
plot.ts(x = y, col="blue")
L<-lag(y,n=1)
y<-rnorm(1000000, mean=4,sd=50)
L<-lag(y,n=1)
e<-rnorm(1000000, mean=0,sd=2)
u<-25000
y_t<-u+(((1+0.54*L)^(-1))*e)
plot.ts(x = y, col="blue")
plot.ts(x = y_t, col="blue")
set.seed(1234)
#y_t=u+(1+0.54L)^-1*e_t
periodos<-1000000
u<-25000
phi<-0.54
e<-rnorm(periodos, mean=0,sd=2)
y_t<-numeric(periodos)
for (t in 1:periodos){
y_t[t]<-u
for(i in 0:(t-1)){
y_t<-y_t[t]+ phi^i * e_t[t-i]
}
}
e_t<-rnorm(periodos, mean=0,sd=2)
for (t in 1:periodos){
y_t[t]<-u
for(i in 0:(t-1)){
y_t<-y_t[t]+ phi^i * e_t[t-i]
}
}
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
plot(x = y_t, col="blue")
plot(x = y_t,type="1" col="blue")
plot(x = y_t,type="1", col="blue")
plot(y_t,type="1", col="blue")
plot(y_t, type = "l", main = "Simulación del Proceso Generador de Datos", ylab = "y_t", xlab = "Tiempo")
periodos<-1000000
u<-1.5
phi<-0.54
e_t<-rnorm(periodos)
y_t<-numeric(periodos)
for (t in 1:periodos){
y_t[t]<-u
for(i in 0:(t-1)){
y_t[t]<-y_t[t]+ phi^i * e_t[t-i]
}
}
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Procesos estocasticos/Punto 5.R", echo=TRUE)
library(tidyverse)
library(sf)
library(readxl)
MGN<-st_read("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Evaluación de impacto/Inferencia-Causal/CNPV2018/Data/SHP_MGN2018_INTGRD_MANZ/MGN_ANM_MANZANA.shp")
Manzanas_Censo <- read_excel("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Evaluación de impacto/Inferencia-Causal/CNPV2018/Data/factMedellinManzanasConsolidado.xlsx")
View(MGN)
names(MGN)
MGN<-MGN %>% filter(MPIO_CDPMP=="05001" & CLAS_CCDGO=="1")
View(MGN)
Manzanas_Censo<-Manzanas_Censo %>% mutate(COD_DANE_A=COD_MANZANA)
MGN_Censo<-MGN %>% left_join(Manzanas_Censo,by="COD_DANE_A")
View(MGN_Censo)
str(MGN_Censo)
View(Manzanas_Censo)
Estrato<-ggplot() + geom_sf(data = MGN_Censo, aes(color = EstratoPromedio))+
labs(
title="Estrato promedio Medellín")
Estrato
Estrato<-ggplot() +
geom_sf(data = MGN_Censo, aes(fill = EstratoPromedio))+
scale_fill_gradient(low="darkred", high = "white")+
labs(
title="Estrato promedio Medellín")
Estrato
Precariedad<-ggplot() +
geom_sf(data = MGN_Censo, aes(fill = PrecariedadPromedio))+
scale_fill_gradient(low="blue", high = "white")+
labs(
title="Precariedad promedio Medellín")
Precariedad
Precariedad<-ggplot() +
geom_sf(data = MGN_Censo, aes(fill = PrecariedadPromedio))+
scale_fill_gradient(low="white", high = "gray")+
labs(
title="Precariedad promedio Medellín")
Precariedad
Estrato<-ggplot() +
geom_sf(data = MGN_Censo, aes(fill = EstratoPromedio))+
scale_fill_gradient(low="darkred", high = "white")+
labs(
title="Estrato promedio Medellín")
Estrato
q()
library(readxl)
ECV_2018 <- read_excel("C:/Users/HP-Laptop/Downloads/ECV_2018.xlsx")
View(ECV_2018)
setwd("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Arriendos_Medellin/Datos/ECV/2018")
# Definir el tamaño del bloque
tamaño_bloque <- 9500
# Calcular el número total de bloques
n_bloques <- ceiling(nrow(data) / tamaño_bloque)
# Dividir los datos y guardarlos en archivos CSV
for (i in seq_len(n_bloques)) {
# Definir el índice inicial y final para cada bloque
inicio <- (i - 1) * tamaño_bloque + 1
fin <- min(i * tamaño_bloque, nrow(data))
# Extraer el bloque
bloque <- data[inicio:fin, ]
# Definir el nombre del archivo CSV
nombre_archivo <- sprintf("ECV_2018_%03d.csv", i)
# Guardar el bloque en un archivo CSV con codificación UTF-8
write.csv(bloque, nombre_archivo, row.names = FALSE, fileEncoding = "UTF-8")
}
n_bloques <- ceiling(nrow(data) / tamaño_bloque)
n_bloques
data<-ECV_2018
tamaño_bloque <- 15800
# Calcular el número total de bloques
n_bloques <- ceiling(nrow(data) / tamaño_bloque)
for (i in seq_len(n_bloques)) {
# Definir el índice inicial y final para cada bloque
inicio <- (i - 1) * tamaño_bloque + 1
fin <- min(i * tamaño_bloque, nrow(data))
# Extraer el bloque
bloque <- data[inicio:fin, ]
# Definir el nombre del archivo CSV
nombre_archivo <- sprintf("ECV_2018_%03d.csv", i)
# Guardar el bloque en un archivo CSV con codificación UTF-8
write.csv(bloque, nombre_archivo, row.names = FALSE, fileEncoding = "UTF-8")
}
library(readxl)
data <- read_excel("C:/Users/HP-Laptop/Downloads/ECV_2019.xlsx")
View(data)
setwd("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Arriendos_Medellin/Datos/ECV/2019")
# Definir el tamaño del bloque
tamaño_bloque <- 15800
# Calcular el número total de bloques
n_bloques <- ceiling(nrow(data) / tamaño_bloque)
# Dividir los datos y guardarlos en archivos CSV
for (i in seq_len(n_bloques)) {
# Definir el índice inicial y final para cada bloque
inicio <- (i - 1) * tamaño_bloque + 1
fin <- min(i * tamaño_bloque, nrow(data))
# Extraer el bloque
bloque <- data[inicio:fin, ]
# Definir el nombre del archivo CSV
nombre_archivo <- sprintf("ECV_2019_%03d.csv", i)
# Guardar el bloque en un archivo CSV con codificación UTF-8
write.csv(bloque, nombre_archivo, row.names = FALSE, fileEncoding = "UTF-8")
}
source("https://raw.githubusercontent.com/AguirreAntolinez/Arriendos_Medellin/main/Scripts/Importar%20datas.R")
ECV[["ECV_2004"]]<-ECV[["ECV_2004"]] %>%
mutate(
factorExpPersonas=faestrat,
factorExpHogares=NA,
factorExpViviendas=NA,
skVivienda=paste0(medicion,"_",noform),
skHogar=paste0(skVivienda,"_",no_hogar)
)
#2005
ECV[["ECV_2005"]]<-ECV[["ECV_2005"]] %>%
mutate(
factorExpPersonas=FA2005,
factorExpHogares=NA,
factorExpViviendas=NA,
skVivienda=paste0(medicion,"_",NoForm),
skHogar=paste0(skVivienda,"_",No_Hogar)
)
#2006
ECV[["ECV_2006"]]<-ECV[["ECV_2006"]] %>%
mutate(
factorExpPersonas=fa2006_1,
factorExpHogares=NA,
factorExpViviendas=NA,
skVivienda=paste0(medicion,"_",NoForm),
skHogar=paste0(skVivienda,"_",No_Hogar)
)
#2007
ECV[["ECV_2007"]]<-ECV[["ECV_2007"]] %>%
mutate(
factorExpPersonas=fa2007persona,
factorExpHogares=fa2007Hogares,
factorExpViviendas=fa2007Viviendas,
skVivienda=paste0(medicion,"_",NO),
skHogar=paste0(skVivienda,"_",N_hogar)
)
#2008
ECV[["ECV_2008"]]<-ECV[["ECV_2008"]] %>%
mutate(
factorExpPersonas=fePersonas2008,
factorExpHogares=fehogares2008,
factorExpViviendas=feviviendas2008,
skVivienda=paste0(medicion,"_",nro_formulario),
skHogar=paste0(skVivienda,"_",nro_hogar)
)
#2009
ECV[["ECV_2009"]]<-ECV[["ECV_2009"]] %>%
mutate(
factorExpPersonas=FEP2009,
factorExpHogares=FEH2009,
factorExpViviendas=FEVIV2009,
skVivienda=paste0(medicion,"_",nro_formulario),
skHogar=paste0(skVivienda,"_",nro_hogar)
)
#2010
ECV[["ECV_2010"]]<-ECV[["ECV_2010"]] %>%
mutate(
factorExpPersonas=FE2010_Per,
factorExpHogares=FE2010_Hog,
factorExpViviendas=FE2010_Viv,
skVivienda=paste0(medicion,"_",Form),
skHogar=paste0(skVivienda,"_",Hogar)
)
#2011
ECV[["ECV_2011"]]<-ECV[["ECV_2011"]] %>%
mutate(
factorExpPersonas=FEpers2011,
factorExpHogares=FEhog2011,
factorExpViviendas=FEviv2011,
skVivienda=paste0(medicion,"_",Form),
skHogar=paste0(skVivienda,"_",Hogar)
)
#2012
ECV[["ECV_2012"]]<-ECV[["ECV_2012"]] %>%
mutate(
factorExpPersonas=FE_P,
factorExpHogares=FEV_H,
factorExpViviendas=FEV_H,
skVivienda=paste0(medicion,"_",Form),
skHogar=paste0(skVivienda,"_",Hogar)
)
#2013
ECV[["ECV_2013"]]<-ECV[["ECV_2013"]] %>%
mutate(
factorExpPersonas=FEP2013,
factorExpHogares=FEVH2013,
factorExpViviendas=FEVH2013,
skVivienda=paste0(medicion,"_",Form),
skHogar=paste0(skVivienda,"_",Hogar)
)
#2014
ECV[["ECV_2014"]]<-ECV[["ECV_2014"]] %>%
mutate(
factorExpPersonas=FEP,
factorExpHogares=FEVH,
factorExpViviendas=FEVH,
skVivienda=paste0(medicion,"_",Form),
skHogar=paste0(skVivienda,"_",Hogar)
)
#2015
ECV[["ECV_2015"]]<-ECV[["ECV_2015"]][-1,]
ECV[["ECV_2015"]]<-ECV[["ECV_2015"]] %>%
mutate(
factorExpPersonas=FEPersonas2015,
factorExpHogares=FEViviendas2015,
factorExpViviendas=FEViviendas2015,
skVivienda=paste0(medicion,"_",Form),
skHogar=paste0(skVivienda,"_",Hogar)
)
#2016
ECV[["ECV_2016"]]<-ECV[["ECV_2016"]] %>%
mutate(
factorExpPersonas=FEP,
factorExpHogares=FEVH,
factorExpViviendas=FEVH,
skVivienda=paste0(medicion,"_",Form),
skHogar=paste0(skVivienda,"_",Hogar)
)
#2017
ECV[["ECV_2017"]]<-ECV[["ECV_2017"]] %>%
mutate(
factorExpPersonas=FEP,
factorExpHogares=FEVH,
factorExpViviendas=FEVH,
skVivienda=paste0(medicion,"_",formulario),
skHogar=paste0(skVivienda,"_",Hogar)
)
#2018
ECV[["ECV_2018"]]<-ECV[["ECV_2018"]] %>%
mutate(
factorExpPersonas=FEP,
factorExpHogares=FEVH,
factorExpViviendas=FEVH,
skVivienda=paste0(medicion,"_",Form),
skHogar=paste0(skVivienda,"_",Hogar)
)
#2019
ECV[["ECV_2019"]]<-ECV[["ECV_2019"]] %>%
mutate(
factorExpPersonas=FEP,
factorExpHogares=FEVH,
factorExpViviendas=FEVH,
skVivienda=paste0(medicion,"_",Form),
skHogar=paste0(skVivienda,"_",Hogar)
)
#2021
ECV[["ECV_2021"]]<-ECV[["ECV_2021"]] %>%
mutate(
factorExpPersonas=FEP,
factorExpHogares=FEH,
factorExpViviendas=FEV,
skVivienda=paste0(medicion,"_",NoForm),
skHogar=paste0(skVivienda,"_",sHogar)
)
#2022
ECV[["ECV_2022"]]<-ECV[["ECV_2022"]] %>%
mutate(
factorExpPersonas=FEP,
factorExpHogares=FEH,
factorExpViviendas=FEV,
skVivienda=paste0(medicion,"_",Form),
skHogar=paste0(skVivienda,"_",hogar)
)
#2023
ECV[["ECV_2023"]]<-ECV[["ECV_2023"]] %>%
mutate(
factorExpPersonas=FEP,
factorExpHogares=FEH,
factorExpViviendas=FEV,
skVivienda=paste0(medicion,"_",NoForm),
skHogar=paste0(skVivienda,"_",sHogar)
)
#Consolidar datas
variables<-c(
"skPersona",
"medicion",
"factorExpPersonas",
"factorExpHogares",
"factorExpViviendas",
"skVivienda",
"skHogar"
)
data_consolidada<-do.call(rbind,lapply(ECV,function(df) df[,variables,drop=FALSE]))
#Revisión de bases y frecuencias
bases_frecuencias<-data_consolidada %>%
mutate(base_personas=1) %>%
group_by(medicion) %>%
summarise(
Base_Personas=sum(base_personas),
Poblacion=sum(as.numeric(factorExpPersonas)),
Base_Viviendas= n_distinct(skVivienda),
Base_Hogares= n_distinct(skHogar)
)
Viviendas<-data_consolidada %>%
select(medicion,skVivienda,factorExpViviendas) %>%
distinct() %>%
group_by(medicion) %>%
summarise(Viviendas=sum(as.numeric(factorExpViviendas)))
Hogares<-data_consolidada %>%
select(medicion,skHogar,factorExpHogares) %>%
distinct() %>%
group_by(medicion) %>%
summarise(Hogares=sum(as.numeric(factorExpHogares)))
bases_frecuencias<-bases_frecuencias %>%
left_join(Viviendas,by="medicion") %>%
left_join(Hogares,by="medicion")
View(bases_frecuencias)
table(ECV[["ECV_2018"]]$CodBarrio)
barrios2018<-ECV[["ECV_2018"]] %>% select(ComunaCorr,CodBarrio) %>% distinct %>% as.data.frame()
View(barrios2018)
writexl::write_xlsx(x = barrios2018,path = "C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Data/DATOS ECV/Alcaldia de Medellín/Barrios por medición/barrios ECV_2018.xlsx")
table(ECV[["ECV_2019"]]$P_7)
table(ECV[["ECV_2019"]]$P_6)
barrios2019<-ECV[["ECV_2019"]] %>% select(P_6,P_7) %>% distinct %>% as.data.frame()
writexl::write_xlsx(x = barrios2019,path = "C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/Data/DATOS ECV/Alcaldia de Medellín/Barrios por medición/barrios ECV_2019.xlsx")
