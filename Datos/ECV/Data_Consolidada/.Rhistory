agg.es <- aggte(cs_model, type = "dynamic", na.rm = TRUE)
# Create the plot and add title with number of treated units
p <- ggdid(agg.es) +
ggtitle(paste0("Cutoff: ", cp, " — Treated Units: ", num_treated))
plots[[i]] <- p
}
# Combine all plots using patchwork
wrap_plots(plots, ncol = 4)
puntos_corte<-seq(0.05,0.2, by=0.01)
plots<-list()
for (i in seq_along(puntos_corte)) {
cp <- puntos_corte[i]
# Recalculate the treatment and group variables
data_cp <- data_barrios %>%
select(medicion, codigoBarrioComunaUnificado,
Estrato_alto, Estrato_medio, servicios,
por_hacinamiento, por_material_vivienda,
viviendas, porcentaje_migrantes_internacionales, log_arriendo) %>%
mutate(medicion = as.numeric(medicion),
codigoBarrioComunaUnificado = as.numeric(codigoBarrioComunaUnificado)) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > cp], na.rm = TRUE),
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
tratamiento = ifelse(inicio_tratamiento != 0, 1, 0)
) %>%
ungroup()
# Count number of treated units (first treated in any period)
num_treated <- data_cp %>%
filter(tratamiento == 1) %>%
distinct(codigoBarrioComunaUnificado) %>%
nrow()
# Estimate the DiD model
cs_model <- att_gt(
yname = "log_arriendo",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
control_group = "notyettreated",
bstrap = TRUE,
data = data_cp
)
agg.es <- aggte(cs_model, type = "dynamic", na.rm = TRUE)
# Create the plot and add title with number of treated units
p <- ggdid(agg.es) +
ggtitle(paste0("Cutoff: ", cp, " — Treated Units: ", num_treated))
plots[[i]] <- p
}
# Combine all plots using patchwork
wrap_plots(plots, ncol = 4)
#Contra población expulsada
plots<-list()
for (i in seq_along(puntos_corte)) {
cp <- puntos_corte[i]
# Recalculate the treatment and group variables
data_cp <- data_barrios %>%
select(medicion, codigoBarrioComunaUnificado,PoblacionBarrioAnterior,
Estrato_alto, Estrato_medio, servicios,
por_hacinamiento, por_material_vivienda,
viviendas, porcentaje_migrantes_internacionales, log_arriendo) %>%
mutate(medicion = as.numeric(medicion),
codigoBarrioComunaUnificado = as.numeric(codigoBarrioComunaUnificado),
PoblacionBarrioAnterior=ifelse(is.na(PoblacionBarrioAnterior),0,PoblacionBarrioAnterior)) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > cp], na.rm = TRUE),
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
tratamiento = ifelse(inicio_tratamiento != 0, 1, 0)
) %>%
ungroup()
# Count number of treated units (first treated in any period)
num_treated <- data_cp %>%
filter(tratamiento == 1) %>%
distinct(codigoBarrioComunaUnificado) %>%
nrow()
# Estimate the DiD model
cs_model <- att_gt(
yname = "PoblacionBarrioAnterior",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
control_group = "notyettreated",
bstrap = TRUE,
data = data_cp
)
agg.es <- aggte(cs_model, type = "dynamic", na.rm = TRUE)
# Create the plot and add title with number of treated units
p <- ggdid(agg.es) +
ggtitle(paste0("Cutoff: ", cp, " — Treated Units: ", num_treated))
plots[[i]] <- p
}
# Combine all plots using patchwork
wrap_plots(plots, ncol = 4)
View(data_barrios)
data_did <- data_barrios %>%
filter() %>%
select(medicion,codigoBarrioComunaUnificado,
PoblacionBarrioAnterior,
Estrato_alto,Estrato_medio,servicios,
por_hacinamiento,por_material_vivienda,
viviendas,porcentaje_migrantes_internacionales,log_arriendo) %>%
mutate(medicion=as.numeric(medicion),
codigoBarrioComunaUnificado=as.numeric(codigoBarrioComunaUnificado),
PoblacionBarrioAnterior=ifelse(is.na(PoblacionBarrioAnterior),0,PoblacionBarrioAnterior),
porcentajeExpulsadoPoblacionBarrioAnterior/Poblacion) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
# Detectar el primer año en que supera el punto de corte
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > 0.1], na.rm = TRUE),
# Si nunca supera el punto de corte, poner NA en iniciotratamiento
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
# Asignar 1 si alguna vez superó el punto de corte, 0 en caso contrario
tratamiento = ifelse(inicio_tratamiento!=0, 1, 0)
) %>%
ungroup()
data_did <- data_barrios %>%
filter() %>%
select(medicion,codigoBarrioComunaUnificado,
PoblacionBarrioAnterior,
Estrato_alto,Estrato_medio,servicios,
por_hacinamiento,por_material_vivienda,
viviendas,porcentaje_migrantes_internacionales,log_arriendo) %>%
mutate(medicion=as.numeric(medicion),
codigoBarrioComunaUnificado=as.numeric(codigoBarrioComunaUnificado),
PoblacionBarrioAnterior=ifelse(is.na(PoblacionBarrioAnterior),0,PoblacionBarrioAnterior),
porcentajeExpulsado=PoblacionBarrioAnterior/Poblacion) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
# Detectar el primer año en que supera el punto de corte
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > 0.1], na.rm = TRUE),
# Si nunca supera el punto de corte, poner NA en iniciotratamiento
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
# Asignar 1 si alguna vez superó el punto de corte, 0 en caso contrario
tratamiento = ifelse(inicio_tratamiento!=0, 1, 0)
) %>%
ungroup()
data_did <- data_barrios %>%
filter() %>%
select(medicion,codigoBarrioComunaUnificado,
Poblacion,
PoblacionBarrioAnterior,
Estrato_alto,Estrato_medio,servicios,
por_hacinamiento,por_material_vivienda,
viviendas,porcentaje_migrantes_internacionales,log_arriendo) %>%
mutate(medicion=as.numeric(medicion),
codigoBarrioComunaUnificado=as.numeric(codigoBarrioComunaUnificado),
PoblacionBarrioAnterior=ifelse(is.na(PoblacionBarrioAnterior),0,PoblacionBarrioAnterior),
porcentajeExpulsado=PoblacionBarrioAnterior/Poblacion) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
# Detectar el primer año en que supera el punto de corte
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > 0.1], na.rm = TRUE),
# Si nunca supera el punto de corte, poner NA en iniciotratamiento
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
# Asignar 1 si alguna vez superó el punto de corte, 0 en caso contrario
tratamiento = ifelse(inicio_tratamiento!=0, 1, 0)
) %>%
ungroup()
cs_model<- att_gt(yname = "porcentajeExpulsado",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
#xformla =  ~viviendas, #servicios + Estrato_medio + por_hacinamiento + por_material_vivienda
control_group = "notyettreated",
bstrap=TRUE,# manejo de los errores.
data = data_did)
summary(cs_model)
agg.es <- aggte(cs_model, type = "dynamic", na.rm = TRUE)
ggdid(agg.es)
summary(agg.es)
for (i in seq_along(puntos_corte)) {
cp <- puntos_corte[i]
# Recalculate the treatment and group variables
data_cp <- data_barrios %>%
select(medicion,codigoBarrioComunaUnificado,
Poblacion,
PoblacionBarrioAnterior,
Estrato_alto,Estrato_medio,servicios,
por_hacinamiento,por_material_vivienda,
viviendas,porcentaje_migrantes_internacionales,log_arriendo) %>%
mutate(medicion=as.numeric(medicion),
codigoBarrioComunaUnificado=as.numeric(codigoBarrioComunaUnificado),
PoblacionBarrioAnterior=ifelse(is.na(PoblacionBarrioAnterior),0,PoblacionBarrioAnterior),
porcentajeExpulsado=PoblacionBarrioAnterior/Poblacion) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > cp], na.rm = TRUE),
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
tratamiento = ifelse(inicio_tratamiento != 0, 1, 0)
) %>%
ungroup()
# Count number of treated units (first treated in any period)
num_treated <- data_cp %>%
filter(tratamiento == 1) %>%
distinct(codigoBarrioComunaUnificado) %>%
nrow()
# Estimate the DiD model
cs_model <- att_gt(
yname = "porcentajeExpulsado",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
control_group = "notyettreated",
bstrap = TRUE,
data = data_cp
)
agg.es <- aggte(cs_model, type = "dynamic", na.rm = TRUE)
# Create the plot and add title with number of treated units
p <- ggdid(agg.es) +
ggtitle(paste0("Cutoff: ", cp, " — Treated Units: ", num_treated))
plots[[i]] <- p
}
# Combine all plots using patchwork
wrap_plots(plots, ncol = 4)
writexl::write_xlsx(data_barrios,"C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/MigracionMedellin/Validación de Representatividad/Exceles de revisión/data_barrios con expulsados.xlsx")
#Contra población expulsada
plots<-list()
for (i in seq_along(puntos_corte)) {
cp <- puntos_corte[i]
# Recalculate the treatment and group variables
data_cp <- data_barrios %>%
select(medicion,codigoBarrioComunaUnificado,
Base_PersonasBarrioAnterior,
Estrato_alto,Estrato_medio,servicios,
por_hacinamiento,por_material_vivienda,
viviendas,porcentaje_migrantes_internacionales,log_arriendo) %>%
mutate(medicion=as.numeric(medicion),
codigoBarrioComunaUnificado=as.numeric(codigoBarrioComunaUnificado),
Base_PersonasBarrioAnterior=ifelse(is.na(Base_PersonasBarrioAnterior),0,Base_PersonasBarrioAnterior)
) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > cp], na.rm = TRUE),
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
tratamiento = ifelse(inicio_tratamiento != 0, 1, 0)
) %>%
ungroup()
# Count number of treated units (first treated in any period)
num_treated <- data_cp %>%
filter(tratamiento == 1) %>%
distinct(codigoBarrioComunaUnificado) %>%
nrow()
# Estimate the DiD model
cs_model <- att_gt(
yname = "Base_PersonasBarrioAnterior",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
control_group = "notyettreated",
bstrap = TRUE,
data = data_cp
)
agg.es <- aggte(cs_model, type = "dynamic", na.rm = TRUE)
# Create the plot and add title with number of treated units
p <- ggdid(agg.es) +
ggtitle(paste0("Cutoff: ", cp, " — Treated Units: ", num_treated))
plots[[i]] <- p
}
# Combine all plots using patchwork
wrap_plots(plots, ncol = 4)
data_did <- data_barrios %>%
select(medicion,codigoBarrioComunaUnificado,
Poblacion,
PoblacionBarrioAnterior,
Base_PersonasBarrioAnterior,
Estrato_alto,Estrato_medio,servicios,
por_hacinamiento,por_material_vivienda,
viviendas,porcentaje_migrantes_internacionales,log_arriendo) %>%
group_by(medicion) %>%
mutate(PoblacionMedicion=sum(Poblacion)) %>%
ungroup() %>%
mutate(medicion=as.numeric(medicion),
codigoBarrioComunaUnificado=as.numeric(codigoBarrioComunaUnificado),
PoblacionBarrioAnterior=ifelse(is.na(PoblacionBarrioAnterior),0,PoblacionBarrioAnterior),
porcentajeExpulsado=PoblacionBarrioAnterior/PoblacionMedicion) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
# Detectar el primer año en que supera el punto de corte
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > 0.1], na.rm = TRUE),
# Si nunca supera el punto de corte, poner NA en iniciotratamiento
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
# Asignar 1 si alguna vez superó el punto de corte, 0 en caso contrario
tratamiento = ifelse(inicio_tratamiento!=0, 1, 0)
) %>%
ungroup()
View(data_did)
cs_model<- att_gt(yname = "porcentajeExpulsado",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
#xformla =  ~viviendas, #servicios + Estrato_medio + por_hacinamiento + por_material_vivienda
control_group = "notyettreated",
bstrap=TRUE,# manejo de los errores.
data = data_did)
summary(cs_model)
agg.es <- aggte(cs_model, type = "dynamic", na.rm = TRUE)
ggdid(agg.es)
# Estimate the DiD model
cs_model <- att_gt(
yname = "porcentajeExpulsado",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
control_group = "notyettreated",
bstrap = TRUE,
data = data_cp
)
#Contra población expulsada
plots<-list()
for (i in seq_along(puntos_corte)) {
cp <- puntos_corte[i]
# Recalculate the treatment and group variables
data_cp <- data_barrios %>%
select(medicion,codigoBarrioComunaUnificado,
Poblacion,
PoblacionBarrioAnterior,
Base_PersonasBarrioAnterior,
Estrato_alto,Estrato_medio,servicios,
por_hacinamiento,por_material_vivienda,
viviendas,porcentaje_migrantes_internacionales,log_arriendo) %>%
group_by(medicion) %>%
mutate(PoblacionMedicion=sum(Poblacion)) %>%
ungroup() %>%
mutate(medicion=as.numeric(medicion),
codigoBarrioComunaUnificado=as.numeric(codigoBarrioComunaUnificado),
PoblacionBarrioAnterior=ifelse(is.na(PoblacionBarrioAnterior),0,PoblacionBarrioAnterior),
porcentajeExpulsado=PoblacionBarrioAnterior/PoblacionMedicion) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > cp], na.rm = TRUE),
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
tratamiento = ifelse(inicio_tratamiento != 0, 1, 0)
) %>%
ungroup()
# Count number of treated units (first treated in any period)
num_treated <- data_cp %>%
filter(tratamiento == 1) %>%
distinct(codigoBarrioComunaUnificado) %>%
nrow()
# Estimate the DiD model
cs_model <- att_gt(
yname = "porcentajeExpulsado",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
control_group = "notyettreated",
bstrap = TRUE,
data = data_cp
)
agg.es <- aggte(cs_model, type = "dynamic", na.rm = TRUE)
# Create the plot and add title with number of treated units
p <- ggdid(agg.es) +
ggtitle(paste0("Cutoff: ", cp, " — Treated Units: ", num_treated))
plots[[i]] <- p
}
# Combine all plots using patchwork
wrap_plots(plots, ncol = 4)
#Contra población expulsada
plots<-list()
for (i in seq_along(puntos_corte)) {
cp <- puntos_corte[i]
# Recalculate the treatment and group variables
data_cp <- data_barrios %>%
select(medicion,codigoBarrioComunaUnificado,
Poblacion,
PoblacionBarrioAnterior,
Base_Personas,
Base_PersonasBarrioAnterior,
Estrato_alto,Estrato_medio,servicios,
por_hacinamiento,por_material_vivienda,
viviendas,porcentaje_migrantes_internacionales,log_arriendo) %>%
group_by(medicion) %>%
mutate(muestraMedicion=sum(Base_Personas)) %>%
ungroup() %>%
mutate(medicion=as.numeric(medicion),
codigoBarrioComunaUnificado=as.numeric(codigoBarrioComunaUnificado),
Base_PersonasBarrioAnterior=ifelse(is.na(Base_PersonasBarrioAnterior),0,Base_PersonasBarrioAnterior),
porcentajeExpulsado=Base_PersonasBarrioAnterior/muestraMedicion) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > cp], na.rm = TRUE),
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
tratamiento = ifelse(inicio_tratamiento != 0, 1, 0)
) %>%
ungroup()
# Count number of treated units (first treated in any period)
num_treated <- data_cp %>%
filter(tratamiento == 1) %>%
distinct(codigoBarrioComunaUnificado) %>%
nrow()
# Estimate the DiD model
cs_model <- att_gt(
yname = "porcentajeExpulsado",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
control_group = "notyettreated",
bstrap = TRUE,
data = data_cp
)
agg.es <- aggte(cs_model, type = "dynamic", na.rm = TRUE)
# Create the plot and add title with number of treated units
p <- ggdid(agg.es) +
ggtitle(paste0("Cutoff: ", cp, " — Treated Units: ", num_treated))
plots[[i]] <- p
}
# Combine all plots using patchwork
wrap_plots(plots, ncol = 4)
#Contra población expulsada
plots<-list()
for (i in seq_along(puntos_corte)) {
cp <- puntos_corte[i]
# Recalculate the treatment and group variables
data_cp <- data_barrios %>%
select(medicion,codigoBarrioComunaUnificado,
Poblacion,
PoblacionBarrioAnterior,
Base_Personas,
Base_PersonasBarrioAnterior,
Estrato_alto,Estrato_medio,servicios,
por_hacinamiento,por_material_vivienda,
viviendas,porcentaje_migrantes_internacionales,log_arriendo) %>%
group_by(medicion) %>%
mutate(muestraMedicion=sum(Base_Personas,na.rm = TRUE)) %>%
ungroup() %>%
mutate(medicion=as.numeric(medicion),
codigoBarrioComunaUnificado=as.numeric(codigoBarrioComunaUnificado),
Base_PersonasBarrioAnterior=ifelse(is.na(Base_PersonasBarrioAnterior),0,Base_PersonasBarrioAnterior),
porcentajeExpulsado=Base_PersonasBarrioAnterior#/muestraMedicion
) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > cp], na.rm = TRUE),
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
tratamiento = ifelse(inicio_tratamiento != 0, 1, 0)
) %>%
ungroup()
# Count number of treated units (first treated in any period)
num_treated <- data_cp %>%
filter(tratamiento == 1) %>%
distinct(codigoBarrioComunaUnificado) %>%
nrow()
# Estimate the DiD model
cs_model <- att_gt(
yname = "porcentajeExpulsado",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
control_group = "notyettreated",
bstrap = TRUE,
data = data_cp
)
agg.es <- aggte(cs_model, type = "dynamic", na.rm = TRUE)
# Create the plot and add title with number of treated units
p <- ggdid(agg.es) +
ggtitle(paste0("Cutoff: ", cp, " — Treated Units: ", num_treated))
plots[[i]] <- p
}
# Combine all plots using patchwork
wrap_plots(plots, ncol = 4)
#Contra población expulsada
plots<-list()
for (i in seq_along(puntos_corte)) {
cp <- puntos_corte[i]
# Recalculate the treatment and group variables
data_cp <- data_barrios %>%
select(medicion,codigoBarrioComunaUnificado,
Poblacion,
PoblacionBarrioAnterior,
Base_Personas,
Base_PersonasBarrioAnterior,
Estrato_alto,Estrato_medio,servicios,
por_hacinamiento,por_material_vivienda,
viviendas,porcentaje_migrantes_internacionales,log_arriendo) %>%
group_by(medicion) %>%
mutate(muestraMedicion=sum(Base_Personas,na.rm = TRUE)) %>%
ungroup() %>%
mutate(medicion=as.numeric(medicion),
codigoBarrioComunaUnificado=as.numeric(codigoBarrioComunaUnificado),
Base_PersonasBarrioAnterior=ifelse(is.na(Base_PersonasBarrioAnterior),0,Base_PersonasBarrioAnterior),
cantidadExpulsados=Base_PersonasBarrioAnterior
) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > cp], na.rm = TRUE),
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
tratamiento = ifelse(inicio_tratamiento != 0, 1, 0)
) %>%
ungroup()
# Count number of treated units (first treated in any period)
num_treated <- data_cp %>%
filter(tratamiento == 1) %>%
distinct(codigoBarrioComunaUnificado) %>%
nrow()
# Estimate the DiD model
cs_model <- att_gt(
yname = "cantidadExpulsados",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
control_group = "notyettreated",
bstrap = TRUE,
data = data_cp
)
agg.es <- aggte(cs_model, type = "dynamic", na.rm = TRUE)
# Create the plot and add title with number of treated units
p <- ggdid(agg.es) +
ggtitle(paste0("Cutoff: ", cp, " — Treated Units: ", num_treated))
plots[[i]] <- p
}
# Combine all plots using patchwork
wrap_plots(plots, ncol = 4)
