library(tidyverse)
#Importar los datos
data_barrios<-read.csv2(
'https://raw.githubusercontent.com/AguirreAntolinez/Arriendos_Medellin/refs/heads/main/Datos/ECV/Data_Consolidada/data_barrios.csv',
header = TRUE,sep = ",")
data_barrios <- data_barrios %>%
mutate(
codigoBarrioComunaUnificado=as.numeric(codigoBarrioComunaUnificado),
medicion=as.numeric(medicion),
porcentaje_migrantes_internacionales=as.numeric(porcentaje_migrantes_internacionales),
tasa_permanencia=as.numeric(tasa_permanencia),
log_arriendo=as.numeric(log_arriendo)
)
panel_check <- data_barrios %>%
count(codigoBarrioComunaUnificado)  # Cuenta cuántas mediciones hay por cada código
# Verificar si todos tienen el mismo número de observaciones
if (length(unique(panel_check$n)) == 1) {
print("El panel es balanceado")
} else {
print("El panel es desbalanceado")
}
#Verificar barrios completos
años_completos <- expand.grid(codigoBarrioComunaUnificado = unique(data_barrios$codigoBarrioComunaUnificado),
medicion = unique(data_barrios$medicion))
# Unir con los datos reales
completo_check <- full_join(años_completos, data_barrios, by = c("codigoBarrioComunaUnificado", "medicion"))
# Filtrar los NA en 'viviendas', que indican datos faltantes
datos_faltantes <- completo_check %>% filter(is.na(nombreBarrioUnificado))
#Con el método de Callaway y Sant´Anna
library(did)
library(patchwork)
data_modelo <-data_barrios %>%
select(medicion,
codigoBarrioComunaUnificado,
porcentaje_migrantes_internacionales,
tasa_permanencia,
log_arriendo) %>%
group_by(codigoBarrioComunaUnificado) %>%
mutate(
inicio_tratamiento = min(medicion[porcentaje_migrantes_internacionales > 0.14], na.rm = TRUE),
inicio_tratamiento = ifelse(is.infinite(inicio_tratamiento), 0, inicio_tratamiento),
tratamiento = ifelse(inicio_tratamiento != 0, 1, 0)
) %>%
ungroup()
# Count number of treated units (first treated in any period)
num_treated <- data_modelo %>%
filter(tratamiento == 1) %>%
distinct(codigoBarrioComunaUnificado)
# Estimate the DiD model
cs_model_1 <- att_gt(
yname = "log_arriendo",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
control_group = "notyettreated",
bstrap = TRUE,
data = data_modelo
)
cs_model_2 <- att_gt(
yname = "tasa_permanencia",
tname = "medicion",
idname = "codigoBarrioComunaUnificado",
gname = "inicio_tratamiento",
control_group = "notyettreated",
bstrap = TRUE,
data = data_modelo
)
agg.es_1 <- aggte(cs_model_1, type = "dynamic", na.rm = TRUE)
agg.es_2 <- aggte(cs_model_2, type = "dynamic", na.rm = TRUE)
# Create the plot and add title with number of treated units
p_1 <- ggdid(agg.es_1) +
ggtitle("Efecto sobre el arriendo")
p_2 <- ggdid(agg.es_2) +
ggtitle("Efecto sobre la población local")
plots<-list()
plots[[1]] <- p_1
plots[[2]] <- p_2
wrap_plots(plots, ncol = 2)
mapa<-read_sf("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/MigracionMedellin/Data/Shapemaps/shp_limite_barrio_vereda_cata/limite_barrio_vereda_cata.shp")
library(sf)
mapa<-read_sf("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/MigracionMedellin/Data/Shapemaps/shp_limite_barrio_vereda_cata/limite_barrio_vereda_cata.shp")
data_modelo<-data_modelo %>% mutate(codigo=codigoBarrioComunaUnificado)
mapa_barrios<-mapa %>% left_join(data_modelo, by="codigo")
data_modelo<-data_modelo %>% mutate(codigo=as.character(codigoBarrioComunaUnificado))
mapa_barrios<-mapa %>% left_join(data_modelo, by="codigo")
str(mapa_barrios)
# Crear el mapa
ggplot() +
# Capa base de todos los barrios (en gris claro)
geom_sf(data = mapa_barrios, fill = "lightgray", color = "white", size = 0.1) +
# Capa de barrios tratados (coloreados)
geom_sf(data = barrios_tratados, aes(fill = as.factor(inicio_tratamiento)),
color = "white", size = 0.2) +
# Etiquetas con el año de inicio_tratamiento
geom_sf_text(data = barrios_tratados,
aes(label = inicio_tratamiento),
size = 2.5, color = "black") +
# Escala de colores para los años
scale_fill_brewer(palette = "Set1", name = "Año de inicio\nde tratamiento") +
# Título y tema
labs(title = "Barrios con tratamiento por año de inicio") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Crear el mapa
ggplot() +
# Capa base de todos los barrios (en gris claro)
geom_sf(data = mapa_barrios, fill = "lightgray", color = "white", size = 0.1) +
# Capa de barrios tratados (coloreados)
geom_sf(data = mapa_barrios, aes(fill = as.factor(inicio_tratamiento)),
color = "white", size = 0.2) +
# Etiquetas con el año de inicio_tratamiento
geom_sf_text(data = mapa_barrios,
aes(label = inicio_tratamiento),
size = 2.5, color = "black") +
# Escala de colores para los años
scale_fill_brewer(palette = "Set1", name = "Año de inicio\nde tratamiento") +
# Título y tema
labs(title = "Barrios con tratamiento por año de inicio") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
View(mapa_barrios)
# Filtrar solo los barrios con tratamiento (inicio_tratamiento > 0)
mapa_barrios<- mapa_barrios[!is.na(medicion), ]
# Filtrar solo los barrios con tratamiento (inicio_tratamiento > 0)
mapa_barrios<- mapa_barrios[!is.na(mapa_barrios$medicion), ]
barrios_tratados <- mapa_barrios[mapa_barrios$inicio_tratamiento > 0, ]
# Crear el mapa
ggplot() +
# Capa base de todos los barrios (en gris claro)
geom_sf(data = mapa_barrios, fill = "lightgray", color = "white", size = 0.1) +
# Capa de barrios tratados (coloreados)
geom_sf(data = barrios_tratados, aes(fill = as.factor(inicio_tratamiento)),
color = "white", size = 0.2) +
# Etiquetas con el año de inicio_tratamiento
geom_sf_text(data = barrios_tratados,
aes(label = inicio_tratamiento),
size = 2.5, color = "black") +
# Escala de colores para los años
scale_fill_brewer(palette = "Set1", name = "Año de inicio\nde tratamiento") +
# Título y tema
labs(title = "Barrios con tratamiento por año de inicio") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
table(mapa_barrios$tratamiento)
mapa_barrios %>% filter(tratamiento==1) %>% distinct()
mapa_barrios %>% filter(tratamiento==1) %>% select(nombre_bar) %>% distinct()
View(data_modelo)
data_modelo %>% filter(tratamiento==1) %>% select(nombre_bar) %>% distinct()
data_modelo %>% filter(tratamiento==1) %>% select(codigoBarrioComunaUnificado) %>% distinct()
View(mapa_barrios)
data_modelo<-data_modelo %>% mutate(codigo=codigoBarrioComunaUnificado)
mapa_barrios<-mapa_barrios %>% mutate(codigo=as.numeric(codigo))
mapa_barrios<-mapa %>% left_join(data_modelo, by="codigo")
library(sf)
mapa<-read_sf("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/MigracionMedellin/Data/Shapemaps/shp_limite_barrio_vereda_cata/limite_barrio_vereda_cata.shp")
data_modelo<-data_modelo %>% mutate(codigo=codigoBarrioComunaUnificado)
mapa_barrios<-mapa_barrios %>% mutate(codigo=as.numeric(codigo))
mapa_barrios<-mapa %>% left_join(data_modelo, by="codigo")
data_modelo<-data_modelo %>% mutate(codigo=as.numeric(codigoBarrioComunaUnificado))
mapa_barrios<-mapa_barrios %>% mutate(codigo=as.numeric(codigo))
mapa_barrios<-mapa %>% left_join(data_modelo, by="codigo")
mapa<-read_sf("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/MigracionMedellin/Data/Shapemaps/shp_limite_barrio_vereda_cata/limite_barrio_vereda_cata.shp")
data_modelo<-data_modelo %>% mutate(codigo=as.numeric(codigoBarrioComunaUnificado))
mapa_barrios<-mapa_barrios %>% mutate(codigo=as.numeric(codigo))
mapa_barrios<-mapa %>% left_join(data_modelo, by="codigo")
mapa_barrios<-mapa_barrios %>% mutate(codigo=as.numeric(codigo))
str(mapa_barrios$codigo)
str(data_modelo$codigo)
mapa_barrios<-mapa_barrios %>% left_join(data_modelo, by="codigo")
mapa<-read_sf("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/MigracionMedellin/Data/Shapemaps/shp_limite_barrio_vereda_cata/limite_barrio_vereda_cata.shp")
data_modelo<-data_modelo %>% mutate(codigo=as.numeric(codigoBarrioComunaUnificado))
mapa_barrios<-mapa %>% mutate(codigo=as.numeric(codigo))
mapa_barrios<- mapa_barrios[!is.na(mapa_barrios$medicion), ]
mapa<-read_sf("C:/Users/HP-Laptop/OneDrive - Universidad de Antioquia/Maestría en Economía/Tesis/1. Procesamiento/MigracionMedellin/Data/Shapemaps/shp_limite_barrio_vereda_cata/limite_barrio_vereda_cata.shp")
data_modelo<-data_modelo %>% mutate(codigo=as.numeric(codigoBarrioComunaUnificado))
mapa_barrios<-mapa %>% mutate(codigo=as.numeric(codigo))
mapa_barrios<-mapa_barrios %>% left_join(data_modelo, by="codigo")
mapa_barrios<- mapa_barrios[!is.na(mapa_barrios$medicion), ]
mapa_barrios %>% filter(tratamiento==1) %>% select(codigoBarrioComunaUnificado) %>% distinct()
barrios_tratados <- mapa_barrios[mapa_barrios$inicio_tratamiento > 0, ]
# Crear el mapa
ggplot() +
# Capa base de todos los barrios (en gris claro)
geom_sf(data = mapa_barrios, fill = "lightgray", color = "white", size = 0.1) +
# Capa de barrios tratados (coloreados)
geom_sf(data = barrios_tratados, aes(fill = as.factor(inicio_tratamiento)),
color = "white", size = 0.2) +
# Etiquetas con el año de inicio_tratamiento
geom_sf_text(data = barrios_tratados,
aes(label = inicio_tratamiento),
size = 2.5, color = "black") +
# Escala de colores para los años
scale_fill_brewer(palette = "Set1", name = "Año de inicio\nde tratamiento") +
# Título y tema
labs(title = "Barrios con tratamiento por año de inicio") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Crear el mapa
ggplot() +
# Capa base de todos los barrios (en gris claro)
geom_sf(data = mapa_barrios, fill = "white", color = "gray80", size = 0.1) +
# Capa de barrios tratados (coloreados)
geom_sf(data = barrios_tratados, aes(fill = as.factor(inicio_tratamiento)),
color = "white", size = 0.2) +
# Etiquetas con el año de inicio_tratamiento
geom_sf_text(data = barrios_tratados,
aes(label = inicio_tratamiento),
size = 2.5, color = "black") +
# Escala de colores para los años
scale_fill_brewer(palette = "Set1", name = "Año de inicio\nde tratamiento") +
# Título y tema
labs(title = "Barrios con tratamiento por año de inicio") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Crear el mapa
ggplot() +
# Capa base de todos los barrios (en gris claro)
geom_sf(data = mapa_barrios, fill = "white", color = "gray80", size = 0.1) +
# Capa de barrios tratados (coloreados)
geom_sf(data = barrios_tratados, aes(fill = as.factor(inicio_tratamiento)),
color = "white", size = 0.2) +
# Etiquetas con el año de inicio_tratamiento
geom_sf_text(data = barrios_tratados,
aes(label = inicio_tratamiento),
size = 2.5, color = "black") +
# Escala de colores para los años
scale_fill_brewer(palette = "Pastel1", name = "Año de inicio\nde tratamiento") +
# Título y tema
labs(title = "Barrios con tratamiento por año de inicio") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# 1. Obtener el rectángulo delimitador (bbox) del mapa
bbox_polygon <- st_as_sfc(st_bbox(mapa_barrios))
# 2. Crear el mapa con el borde de grilla
ggplot() +
# --- Capa 1: Borde de fondo (rectángulo gris claro) ---
geom_sf(data = bbox_polygon,
fill = NA,                 # Sin relleno
color = "gray50",          # Color del borde
linewidth = 0.5,           # Grosor de la línea
linetype = "dashed") +     # Estilo de línea (opcional)
# --- Capa 2: Barrios no tratados (blancos) ---
geom_sf(data = mapa_barrios[mapa_barrios$inicio_tratamiento == 0, ],
fill = "white",
color = "gray90",
linewidth = 0.1) +
# --- Capa 3: Barrios tratados (pasteles) ---
geom_sf(data = barrios_tratados,
aes(fill = as.factor(inicio_tratamiento)),
color = "white",
linewidth = 0.2) +
# --- Etiquetas ---
geom_sf_text(data = barrios_tratados,
aes(label = inicio_tratamiento),
size = 2.5,
color = "black") +
# --- Escala de colores pasteles ---
scale_fill_brewer(palette = "Pastel1", name = "Año de inicio") +
# --- Título y tema ---
labs(title = "Barrios con tratamiento") +
theme_void() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom"
)
# 2. Crear el mapa con el borde de grilla
ggplot() +
# --- Capa 1: Borde de fondo (rectángulo gris claro) ---
geom_sf(data = bbox_polygon,
fill = NA,                 # Sin relleno
color = "black",          # Color del borde
linewidth = 0.5           # Grosor de la línea
) +     # Estilo de línea (opcional)
# --- Capa 2: Barrios no tratados (blancos) ---
geom_sf(data = mapa_barrios[mapa_barrios$inicio_tratamiento == 0, ],
fill = "white",
color = "black",
linewidth = 0.1) +
# --- Capa 3: Barrios tratados (pasteles) ---
geom_sf(data = barrios_tratados,
aes(fill = as.factor(inicio_tratamiento)),
color = "white",
linewidth = 0.2) +
# --- Etiquetas ---
geom_sf_text(data = barrios_tratados,
aes(label = inicio_tratamiento),
size = 2.5,
color = "black") +
# --- Escala de colores pasteles ---
scale_fill_brewer(palette = "Pastel1", name = "Año de inicio") +
# --- Título y tema ---
labs(title = "Barrios con tratamiento") +
theme_void() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom"
)
# 2. Crear el mapa con el borde de grilla
ggplot() +
# --- Capa 1: Borde de fondo (rectángulo gris claro) ---
geom_sf(data = bbox_polygon,
fill = NA,                 # Sin relleno
color = "black",          # Color del borde
linewidth = 0.5           # Grosor de la línea
) +     # Estilo de línea (opcional)
# --- Capa 2: Barrios no tratados (blancos) ---
geom_sf(data = mapa_barrios[mapa_barrios$inicio_tratamiento == 0, ],
fill = "white",
color = "black",
linewidth = 0.1) +
# --- Capa 3: Barrios tratados (pasteles) ---
geom_sf(data = barrios_tratados,
aes(fill = as.factor(inicio_tratamiento)),
color = "white",
linewidth = 0.2) +
# --- Etiquetas ---
geom_sf_text(data = barrios_tratados,
aes(label = inicio_tratamiento),
size = 2.5,
color = "black") +
# --- Escala de colores pasteles ---
scale_fill_brewer(palette = "Pastel1", name = "Año de ingreso al tratamiento") +
# --- Título y tema ---
labs(title = "Barrios en el grupo de tratamiento") +
theme_void() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "bottom"
)
cs_model_1$group
cs_model_1$V_analytical
cs_model_1$att
summary(cs_model_1)
agg.es_1_group <- aggte(cs_model_1, type = "group", na.rm = TRUE)
p_1_gruop <- ggdid(agg.es_1_group) +
ggtitle("Efecto sobre el arriendo")
p_1_gruop
agg.es_1_group <- aggte(cs_model_1, type = "time", na.rm = TRUE)
p_1_gruop <- ggdid(agg.es_1_group) +
ggtitle("Efecto sobre el arriendo")
agg.es_1_group <- aggte(cs_model_1, type = "time", na.rm = TRUE)
agg.es_1_group <- aggte(cs_model_1, type = "calendar", na.rm = TRUE)
p_1_gruop <- ggdid(agg.es_1_group) +
ggtitle("Efecto sobre el arriendo")
# Create the plot and add title with number of treated units
p_1 <- ggdid(agg.es_1) +
ggtitle("Efecto sobre el arriendo")
agg.es_1_group <- aggte(cs_model_1, type = "calendar", na.rm = TRUE)
p_1_gruop <- ggdid(agg.es_1_group) +
ggtitle("Efecto sobre el arriendo")
agg.es_1_group <- aggte(cs_model_1, type = "calendar", na.rm = TRUE)
p_1_gruop <- ggdid(agg.es_1_group) +
ggtitle("Efecto sobre el arriendo")
p_1_gruop
agg.es_1_group <- aggte(cs_model_1, type = "simple", na.rm = TRUE)
p_1_gruop <- ggdid(agg.es_1_group) +
ggtitle("Efecto sobre el arriendo")
agg.es_1_group
agg.es_1_dynamic <- aggte(cs_model_1, type = "dynamic", na.rm = TRUE)
agg.es_2_dynamic <- aggte(cs_model_2, type = "dynamic", na.rm = TRUE)
p_1_dynamic <- ggdid(agg.es_1) +
ggtitle("Efecto sobre el arriendo")
p_2_dynamic <- ggdid(agg.es_2) +
ggtitle("Efecto sobre la población local")
plots<-list()
plots[[1]] <- p_1_dynamic
plots[[2]] <- p_1_dynamic
wrap_plots(plots, ncol = 2) + plot_annotation(title = "Efectos dinámicos del tratamiento")
agg.es_1_dynamic <- aggte(cs_model_1, type = "dynamic", na.rm = TRUE)
agg.es_2_dynamic <- aggte(cs_model_2, type = "dynamic", na.rm = TRUE)
p_1_dynamic <- ggdid(agg.es_1) +
ggtitle("Efecto sobre el alquiler")
p_2_dynamic <- ggdid(agg.es_2) +
ggtitle("Efecto sobre la población local")
plots<-list()
plots[[1]] <- p_1_dynamic
plots[[2]] <- p_1_dynamic
wrap_plots(plots, ncol = 2) + plot_annotation(title = "Efectos dinámicos del tratamiento")
agg.es_1_dynamic <- aggte(cs_model_1, type = "dynamic", na.rm = TRUE)
agg.es_2_dynamic <- aggte(cs_model_2, type = "dynamic", na.rm = TRUE)
p_1_dynamic <- ggdid(agg.es_1) +
ggtitle("Efecto sobre el alquiler")
p_2_dynamic <- ggdid(agg.es_2) +
ggtitle("Efecto sobre la población local")
plots<-list()
plots[[1]] <- p_1_dynamic
plots[[2]] <- p_2_dynamic
wrap_plots(plots, ncol = 2) + plot_annotation(title = "Efectos dinámicos del tratamiento")
data_modelo %>% group_by(medicion) %>% summarise(mean(tasa_permanencia))
resumen_tasa<-data_modelo %>% group_by(medicion) %>% summarise(mean(tasa_permanencia))
writexl::write_xlsx(resumen_tasa,"resumen_tasa.xlsx")
getwd()
agg.es_1_group <- aggte(cs_model_1, type = "group", na.rm = TRUE)
agg.es_2_group <- aggte(cs_model_2, type = "group", na.rm = TRUE)
p_1_group <- ggdid(agg.es_1_group) +
ggtitle("Efecto sobre el alquiler")
p_2_group <- ggdid(agg.es_2_group) +
ggtitle("Efecto sobre la población local")
plots<-list()
plots[[1]] <- p_1_group
plots[[2]] <- p_2_group
wrap_plots(plots, ncol = 2) + plot_annotation(title = "Efectos por grupos de tratamiento")
agg.es_1_calendar <- aggte(cs_model_1, type = "calendar", na.rm = TRUE)
agg.es_2_calendar <- aggte(cs_model_2, type = "calendar", na.rm = TRUE)
p_1_calendar <- ggdid(agg.es_1_calendar) +
ggtitle("Efecto sobre el alquiler")
p_2_calendar <- ggdid(agg.es_2_calendar) +
ggtitle("Efecto sobre la población local")
plots<-list()
plots[[1]] <- p_1_calendar
plots[[2]] <- p_2_calendar
wrap_plots(plots, ncol = 2) + plot_annotation(title = "Efectos por periodo de tiempo de tratamiento")
